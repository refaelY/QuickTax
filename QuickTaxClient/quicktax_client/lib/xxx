final jsonResponse = jsonDecode(responseMessage);
List<Employee> employeeList = [];

for (var employeeJson in jsonResponse) {
  Employee employee = Employee.fromJson(employeeJson);

  List<Receipt> receiptList = [];
  for (var receipt in employee.receipts) {
    Map<String, dynamic> requestData = {
      "_pathImg": receipt.image, // This is the path of the img
    };

    String imgRequestMsg = "111" +
        jsonEncode(requestData).length.toString().padLeft(10, '0') +
        jsonEncode(requestData);

    final imgResponse = await communicator.sendRequestToServer(imgRequestMsg);

    final imgResponseCode = imgResponse["responseCode"];
    final imgResponseMessage = imgResponse["responseMessage"];

    if (imgResponseCode == 404) {
      throw Exception("Error fetching receipt image");
    } else if (imgResponseCode == 211) {
      try {
        Map<String, String> imgRes =
            Map<String, String>.from(json.decode(imgResponseMessage));
        // Create a new Receipt object instead of modifying the existing one
        Receipt updatedReceipt = Receipt(
          image: imgRes['_img'] ?? ' ', // This is the base64 img
          userId: receipt.userId,
          storeName: receipt.storeName,
          amount: receipt.amount,
          dateTime: receipt.dateTime,
        );
        receiptList.add(updatedReceipt);
      } catch (e) {
        // Handle non-image response scenario here
      }
    }
  }
  // Assign the updated receipt list to the employee
  employee = Employee(
    userId: employee.userId,
    userName: employee.userName,
    storeName: employee.storeName,
    receipts: receiptList,
  );
  employee.receiptCount = employee.receipts.length;
  employeeList.add(employee);
}

return employeeList;
