void main() {
  runApp(QuickTax());
}

class QuickTax extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: LoginPage(),
    );
  }
}

class LoginPage extends StatefulWidget { // החלף ל- StatefulWidget
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();
  
  String username = '';
  String password = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      body: Stack(
        children: [
          // Background Image
          Image.asset(
            'assets/images/background.jpg', 
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),
          Center(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // ... קוד היויית הווידג'טים הנותר
                  TextFormField(
                    controller: _usernameController, // הוספת ה- TextEditingController
                    decoration: InputDecoration(
                      labelText: 'Username',
                      prefixIcon: Icon(Icons.person),
                      filled: true,
                      fillColor: Colors.white,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(18.0),
                      ),
                    ),
                  ),
                  // ... קוד היויית הווידג'טים הנותר
                  TextFormField(
                    controller: _passwordController, // הוספת ה- TextEditingController
                    obscureText: true,
                    decoration: InputDecoration(
                      labelText: 'Password',
                      prefixIcon: Icon(Icons.lock),
                      filled: true,
                      fillColor: Colors.white,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(18.0),
                      ),
                    ),
                  ),
                  // ... קוד היויית הווידג'טים הנותר
                  ElevatedButton(
                    onPressed: () async {
                      username = _usernameController.text;
                      password = _passwordController.text;
                      
                      // שליחת הבקשה לשרת
                      await sendRequestToServer();

                      // ניווט לדף נוסף (לדוגמה MenuPage)
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => MenuPage()),
                      );
                    },
                    child: Text('Login'),
                  ),
                  // ... קוד היויית הווידג'טים הנותר
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> sendRequestToServer() async {
    // כאן יש לשלוח את הבקשה לשרת
    // ניתן להשתמש בחבילת http לשליחת בקשות HTTP
    // לדוגמה:
    
    final response = await http.post(
      Uri.parse('https://example.com/api/login'), // URL של השרת
      body: {
        'username': username,
        'password': password,
      },
    );

    if (response.statusCode == 200) {
      // בכאן ניתן לעבד את התשובה מהשרת אם יש צורך
    } else {
      throw Exception('Failed to load data');
    }
  }
}

ElevatedButton(
  onPressed: () async {
    // אתה יכול לקבל את שם המשתמש והסיסמה משדות הטקסט של האנטרי
    String username = '...'; // קבל את שם המשתמש מהטקסט אנטרי
    String password = '...'; // קבל את הסיסמה מהטקסט אנטרי

    // בניית הגוף של הבקשה לשרת
    Map<String, dynamic> requestData = {
      "username": username,
      "password": password,
    };

    final response = await http.post(
      Uri.parse('http://your_server_ip:5555'), // החלף לכתובת ה-IP הנכונה של השרת
      headers: {"Content-Type": "application/json"},
      body: jsonEncode(requestData),
    );

    if (response.statusCode == 200) {
      // הפרות את התשובה מהשרת
      Map<String, dynamic> jsonResponse = jsonDecode(response.body);
      print('Login successful. User ID: ${jsonResponse["userId"]}');
      
      // כאן תוכל להפנות את המשתמש לדף המתאים בהתאם לתשובה שקיבלת
    } else {
      print('Login failed');
    }
  },
  child: Text('Login'),
),

    String requestMessage = "100" + message.length.toString().padLeft(4, '0') + message;




if (responseCode == 404)
        {
          Map<String, String> errMsg = json.decode(responseMessage);
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return AlertDialog(
                title: const Text('Error'),
                content: Text(errMsg['_message']!),
                actions: <Widget>[
                  TextButton(
                    child: const Text('OK'),
                    onPressed: () {
                      Navigator.of(context).pop(); // Close the dialog
                    },
                  ),
                ],
              );
            },
          );
        }
